const { expect } = require("chai");
const { ethers } = require("hardhat");

describe("ProofRegistry", function () {
  let proofRegistry;
  let ageVerifier;
  let owner;
  let user1;
  let user2;

  beforeEach(async function () {
    [owner, user1, user2] = await ethers.getSigners();

    // Deploy AgeVerifier first
    const AgeVerifier = await ethers.getContractFactory("AgeVerifier");
    ageVerifier = await AgeVerifier.deploy();
    await ageVerifier.waitForDeployment();

    // Deploy ProofRegistry with AgeVerifier address
    const ProofRegistry = await ethers.getContractFactory("ProofRegistry");
    proofRegistry = await ProofRegistry.deploy(await ageVerifier.getAddress());
    await proofRegistry.waitForDeployment();
  });

  describe("Deployment", function () {
    it("Should set the correct verifier address", async function () {
      expect(await proofRegistry.verifier()).to.equal(await ageVerifier.getAddress());
    });
  });

  describe("Proof Verification", function () {
    it("Should emit ProofVerified event on successful verification", async function () {
      // Mock proof data (in real scenario, this would be generated by SnarkJS)
      const mockProof = {
        A: { X: ethers.parseEther("1"), Y: ethers.parseEther("2") },
        B: { 
          X: [ethers.parseEther("3"), ethers.parseEther("4")], 
          Y: [ethers.parseEther("5"), ethers.parseEther("6")] 
        },
        C: { X: ethers.parseEther("7"), Y: ethers.parseEther("8") }
      };

      const mockPublicSignals = [ethers.parseEther("1")]; // 1 indicates age >= 18

      // Mock the verifier to return success (0)
      // Note: In a real test, you would need to mock the contract calls properly
      // This is a simplified test that may need adjustment based on actual contract behavior

      await expect(proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals))
        .to.emit(proofRegistry, "ProofVerified")
        .withArgs(user1.address, await ethers.provider.getBlock("latest").then(block => block.timestamp));
    });

    it("Should not allow duplicate verification", async function () {
      const mockProof = {
        A: { X: ethers.parseEther("1"), Y: ethers.parseEther("2") },
        B: { 
          X: [ethers.parseEther("3"), ethers.parseEther("4")], 
          Y: [ethers.parseEther("5"), ethers.parseEther("6")] 
        },
        C: { X: ethers.parseEther("7"), Y: ethers.parseEther("8") }
      };

      const mockPublicSignals = [ethers.parseEther("1")];

      // Mock the verifier to return success
      // Note: In a real test, you would need to mock the contract calls properly

      // First verification should succeed
      await proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals);

      // Second verification should emit ProofAlreadyVerified
      await expect(proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals))
        .to.emit(proofRegistry, "ProofAlreadyVerified")
        .withArgs(user1.address);
    });

    it("Should emit ProofVerificationFailed for invalid proof", async function () {
      const mockProof = {
        A: { X: ethers.parseEther("1"), Y: ethers.parseEther("2") },
        B: { 
          X: [ethers.parseEther("3"), ethers.parseEther("4")], 
          Y: [ethers.parseEther("5"), ethers.parseEther("6")] 
        },
        C: { X: ethers.parseEther("7"), Y: ethers.parseEther("8") }
      };

      const mockPublicSignals = [ethers.parseEther("0")]; // 0 indicates age < 18

      // Mock the verifier to return failure (1)
      // Note: In a real test, you would need to mock the contract calls properly

      await expect(proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals))
        .to.emit(proofRegistry, "ProofVerificationFailed")
        .withArgs(user1.address, "Invalid proof");
    });
  });

  describe("Status Queries", function () {
    it("Should return correct verification status", async function () {
      expect(await proofRegistry.isVerified(user1.address)).to.be.false;

      // Mock successful verification
      const mockProof = {
        A: { X: ethers.parseEther("1"), Y: ethers.parseEther("2") },
        B: { 
          X: [ethers.parseEther("3"), ethers.parseEther("4")], 
          Y: [ethers.parseEther("5"), ethers.parseEther("6")] 
        },
        C: { X: ethers.parseEther("7"), Y: ethers.parseEther("8") }
      };

      const mockPublicSignals = [ethers.parseEther("1")];

      await ageVerifier.mock.verify.returns(0);
      await proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals);

      expect(await proofRegistry.isVerified(user1.address)).to.be.true;
    });

    it("Should return correct verification timestamp", async function () {
      const mockProof = {
        A: { X: ethers.parseEther("1"), Y: ethers.parseEther("2") },
        B: { 
          X: [ethers.parseEther("3"), ethers.parseEther("4")], 
          Y: [ethers.parseEther("5"), ethers.parseEther("6")] 
        },
        C: { X: ethers.parseEther("7"), Y: ethers.parseEther("8") }
      };

      const mockPublicSignals = [ethers.parseEther("1")];

      await ageVerifier.mock.verify.returns(0);
      
      const tx = await proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals);
      const receipt = await tx.wait();
      const block = await ethers.provider.getBlock(receipt.blockNumber);

      expect(await proofRegistry.getVerificationTimestamp(user1.address)).to.equal(block.timestamp);
    });

    it("Should return correct verification status and timestamp", async function () {
      const mockProof = {
        A: { X: ethers.parseEther("1"), Y: ethers.parseEther("2") },
        B: { 
          X: [ethers.parseEther("3"), ethers.parseEther("4")], 
          Y: [ethers.parseEther("5"), ethers.parseEther("6")] 
        },
        C: { X: ethers.parseEther("7"), Y: ethers.parseEther("8") }
      };

      const mockPublicSignals = [ethers.parseEther("1")];

      await ageVerifier.mock.verify.returns(0);
      
      const tx = await proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals);
      const receipt = await tx.wait();
      const block = await ethers.provider.getBlock(receipt.blockNumber);

      const [verified, timestamp] = await proofRegistry.getVerificationStatus(user1.address);
      expect(verified).to.be.true;
      expect(timestamp).to.equal(block.timestamp);
    });
  });

  describe("Edge Cases", function () {
    it("Should handle verification failure gracefully", async function () {
      const mockProof = {
        A: { X: ethers.parseEther("1"), Y: ethers.parseEther("2") },
        B: { 
          X: [ethers.parseEther("3"), ethers.parseEther("4")], 
          Y: [ethers.parseEther("5"), ethers.parseEther("6")] 
        },
        C: { X: ethers.parseEther("7"), Y: ethers.parseEther("8") }
      };

      const mockPublicSignals = [ethers.parseEther("1")];

      // Mock the verifier to revert
      await ageVerifier.mock.verify.revertsWith("Verification failed");

      await expect(proofRegistry.connect(user1).verifyAndStoreProof(mockProof, mockPublicSignals))
        .to.emit(proofRegistry, "ProofVerificationFailed")
        .withArgs(user1.address, "Verification reverted");
    });

    it("Should not allow verification with invalid verifier address", async function () {
      const ProofRegistry = await ethers.getContractFactory("ProofRegistry");
      
      await expect(ProofRegistry.deploy(ethers.constants.AddressZero))
        .to.be.revertedWith("Invalid verifier address");
    });
  });
}); 